
- name : setup sunprofile stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
     - name: Import VPC Variables
       include_vars: var/vpc_setup
     - name: Import other VPc variables
       include_vars: var/output_vars
  
     - name: sunvprofile keypair
       ec2_key:
          name: sunstack
          region: us-east-2
       register: keyout

     - debug:
        var: keyout

     - name: store login key
       copy:
        content: "{{keyout.key.private_key}}"
        dest: ./sunstack-key.pem
       when: keyout.changed

     - name: Create security group for load Balancer
       ec2_group:
          name: vproELB-sg
          description: Allow port 80 from anywhere and all port within sg
          region: "{{region}}"
          vpc_id: "{{vpcid}}"
          rules: 
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0    
       register: vproELBSG_out

     - name: Create security group for sunvprofile stack
       ec2_group:
          name: vproStack-sg
          description: Allow port 80 from anywhere and all port within sg
          region: "{{region}}"
          vpc_id: "{{vpcid}}"
          purge_rules: no
          rules:
            - proto: tcp
              from_port: 80
              to_port: 80
              group_id: "{{vproELBSG_out.group_id}}"

            - proto: tcp
              from_port: 22
              to_port: 22
              group_id: "{{BastionSGid}}"
              
       register: vproStackSG_out
     
     - name: Update Security Group with its own sg id
       ec2_group:
           name: vproStack-sg
           description: Allow port 22 from everywhere and all port within sg
           region: "{{region}}"
           vpc_id: "{{vpcid}}"
 # purge_rule option to avoid any deletion and append the rules
           purge_rules: no
           rules: 
             - proto: all
               group_id : "{{vproStackSG_out.group_id}}"
           
     - name: Creation Nginx Host
       ec2:
 #         key_name: my_keypair
 #         Using the exiting keypair for easy setup.
          key_name: sunstack
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{bastion_ami}}"
          wait: yes
          wait_timeout: 300
          instance_tags:
               Name: "web01"
               Project: sunprofile
               owner: DevOps Team
          exact_count: 1  # so that it create only one instance afte re-running script
          count_tag:
                Name: "web01"
                Project: sunprofile
                owner: DevOps Team
          group_id: "{{vproStackSG_out.group_id}}"
          vpc_subnet_id: "{{prisub1id}}"
          assign_public_ip: yes

       register: web01_out

     - name: Creation mysql  Host
       ec2:
 #         key_name: my_keypair
 #         Using the exiting keypair for easy setup.
          key_name: sunstack
          region: "{{region}}"
          instance_type: t2.micro
          image: "{{bastion_ami}}"
          wait: yes
          wait_timeout: 300
          instance_tags:
               Name: "db01"
               Project: sunprofile
               owner: DevOps Team
          exact_count: 1  # so that it create only one instance afte re-running script
          count_tag:
                Name: "db01"
                Project: sunprofile
                owner: DevOps Team
          group_id: "{{vproStackSG_out.group_id}}"
          vpc_subnet_id: "{{prisub1id}}"
          assign_public_ip: yes

       register: db01_out

     - debug:
           var: db01_out


  # Creation of Load balancer in public subnet 

     - local_action:
              module: ec2_elb_lb
              name: "sunvprofile-elb"
              region: "{{region}}"
              state: present
              instance_ids:
                 - "{{ web01_out.tagged_instances[0].id}}"
              purge_instance_ids: true
              security_group_ids: "{{ vproELBSG_out.group_id}}"   
              subnets:
                 - "{{ pubsub1id }}" 
                 - "{{ pubsub2id }}"
 #               - "{{ pubsub3id }}"
              listeners:
                 - protocol: http 
                   load_balancer_port: 80
                   instance_port: 80

     - name: insert/vupdate hosts Ips and name in file provision stack
       blockinfile:
                  path: provision-stack/group_vars/hostsip
                  block: |
                     web01_ip: {{web01_out.tagged_instances[0].private_ip}}
                     app01_ip: {{web01_out.tagged_instances[0].private_ip}}
                     rmq01_ip: {{web01_out.tagged_instances[0].private_ip}}
                     mc01_ip: {{web01_out.tagged_instances[0].private_ip}}
                     db01_ip: {{db01_out.tagged_instances[0].private_ip}}

     - name: copy login key to provision stack inventory
       copy:
            src: sunstack-key.pem
            dest: provision-stack/sunstack-key.pem
            mode: '0400'

     - name: Insert/Update inventory file provision-stack/inventory
       blockinfile: 
             path: provision-stack/inventory-vpro
             block: |
               web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
               app01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
               rmq01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
               mc01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
               db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
             
               [websrvgrp]
               web01
               
               [appsrvgrp]
               app01
              
               [rmqsrvgrp]
               rmq01
          
               [mcsrvgrp]
               mc01
              
               [dbsrvgrp]
               db01
             
               #         [control]
               # cntl
               


               [stack_inst:children]
               websrvgrp
               appsrvgrp
               rmqsrvgrp
               mcsrvgrp
               dbsrvgrp
               dbsrvgrp

               [stack_inst:vars]
               ansible_user=ubuntu
               ansible_ssh_private_key_file=sunstack-key.pem
